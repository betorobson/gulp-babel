{"version":3,"sources":["file1.js","index.js"],"names":["modulex","require","console","log","o","a","Object","keys","arrayfile1","reduce","accumulator","currentValue","objxyz","fn","txt","Promise","res","rej","setTimeout","x","array1","reducer","objx","nums","loop","map","num","index","obj","includes","objy","b","c","entries","values","key"],"mappings":"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","file":"../app.min.js","sourcesContent":["\nconst modulex = require('../tmp-modules/misc');\n\nconsole.log(modulex);\n\nlet o = {\n\ta:1\n};\n\nconsole.log(Object.keys(o));\n\nconst arrayfile1 = [1, 2, 3, 4];\n\nconsole.log(arrayfile1.reduce((accumulator, currentValue) => accumulator + currentValue));\n\nconst objxyz = {\n\tfn: function(txt)  {\n\t\tconsole.log(txt, typeof this);\n\t\treturn new Promise((res, rej) => {\n\t\t\trej;\n\t\t\tconsole.log(txt, typeof this);\n\t\t\tsetTimeout(res, 1000);\n\t\t});\n\t}\n};\n\nobjxyz.fn('Promisse timeout file1');\n\n","\nlet x = 1;\nconst array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\n\nfor(let x=1; x<10; x++){\n\tconsole.log(x);\n}\n\nconst objx = {\n\tnums: [1,3,4],\n\tloop() {\n\t\tthis.nums.map((num, index) => {\n\t\t\tconsole.log(this.nums[index]);\n\t\t});\n\t}\n};\n\nobjx.loop();\n\nconst obj = {\n\tfn: function(txt)  {\n\t\tconsole.log(txt, typeof this);\n\t\treturn new Promise((res, rej) => {\n\t\t\trej;\n\t\t\tconsole.log(txt, typeof this);\n\t\t\tsetTimeout(res, 1000);\n\t\t});\n\t}\n};\n\nobj.fn('Promisse timeout');\n\n\n// 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer));\n// expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5));\n// expected output: 15\n\nconsole.log(array1.includes(2));\n\nconsole.log(x);\n\nlet objy = { a: 1, b: 2, c: 3 };\nconsole.log(Object.entries(objy));\nconsole.log(Object.values(objy));\n\nObject.keys(objy).map(key => console.log('keys: ', objy[key]));\n"]}