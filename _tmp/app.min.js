"use strict";

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es7.object.values");

require("core-js/modules/es7.object.entries");

require("core-js/modules/es7.array.includes");

require("core-js/modules/es6.array.map");

require("core-js/modules/es6.promise");

require("core-js/modules/es6.array.reduce");

require("core-js/modules/web.dom.iterable");

require("core-js/modules/es6.array.iterator");

require("core-js/modules/es6.object.keys");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var modulex = require('../tmp-modules/misc');

console.log(modulex);
var o = {
  a: 1
};
console.log(Object.keys(o));
var arrayfile1 = [1, 2, 3, 4];
console.log(arrayfile1.reduce(function (accumulator, currentValue) {
  return accumulator + currentValue;
}));
var objxyz = {
  fn: function fn(txt) {
    var _this = this;

    console.log(txt, _typeof(this));
    return new Promise(function (res, rej) {
      rej;
      console.log(txt, _typeof(_this));
      setTimeout(res, 1000);
    });
  }
};
objxyz.fn('Promisse timeout file1');
var x = 1;
var array1 = [1, 2, 3, 4];

var reducer = function reducer(accumulator, currentValue) {
  return accumulator + currentValue;
};

for (var _x = 1; _x < 10; _x++) {
  console.log(_x);
}

var objx = {
  nums: [1, 3, 4],
  loop: function loop() {
    var _this2 = this;

    this.nums.map(function (num, index) {
      console.log(_this2.nums[index]);
    });
  }
};
objx.loop();
var obj = {
  fn: function fn(txt) {
    var _this3 = this;

    console.log(txt, _typeof(this));
    return new Promise(function (res, rej) {
      rej;
      console.log(txt, _typeof(_this3));
      setTimeout(res, 1000);
    });
  }
};
obj.fn('Promisse timeout'); // 1 + 2 + 3 + 4

console.log(array1.reduce(reducer)); // expected output: 10
// 5 + 1 + 2 + 3 + 4

console.log(array1.reduce(reducer, 5)); // expected output: 15

console.log(array1.includes(2));
console.log(x);
var objy = {
  a: 1,
  b: 2,
  c: 3
};
console.log(Object.entries(objy));
console.log(Object.values(objy));
Object.keys(objy).map(function (key) {
  return console.log('keys: ', objy[key]);
});
//# sourceMappingURL=maps/app.min.js.map
